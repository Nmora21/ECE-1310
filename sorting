#include <iostream>
using namespace std;
void printarray(int[], int);  //function prototype
void ascending_selection_sort(int arrayx[], int size);
void descending_selection_sort(int arrayx[], int size);

void changeContent(int arrayx[], int sizeX)
{
    for (int i = 0; i <= sizeX - 1; i++)
    {
        arrayx[i] = rand() % 6; //random number from [0,5] to the array
    }
}

bool linear_search(int arrayx[], int size, int key)
{
    bool found = false;
    int current_inx = 0;
    cout << "the key is " << key << "\n";
    while ((found == false) && (current_inx < size)) //false until proven otherwise
    {//cout<<" item "<<current_inx<<" is "<<arrayx[current_inx];
        if (arrayx[current_inx] == key)
            found = true;
        else
            current_inx = current_inx + 1;
    }
    return found; //found == false
}

bool binary_search(int arrayx[], int size, int key)
{
    bool found = false;
    int low = 0;
    int high = size - 1;
    int middle = (high + low + 1) / 2;
    while ((low <= high) && (found == false))
    {
        if (arrayx[middle] == key)
            found = true;
        else
        {
            if (key < arrayx[middle])
            {
                high = middle - 1;
            }
            else //key>arrayx[middle]
            {
                low = middle + 1;
            }
        }
        middle = (high + low + 1) / 2;
    }
    return found; //found == false
}

int main()
{
    const int sizeA = 10;
    int arrayA[sizeA];
    int key = 0;
    for (int i = 0; i < sizeA; i++)
    {
        arrayA[i] = 50 + rand() % 51;
    }
    cout << endl;
    
    printarray(arrayA, sizeA);  //function call with two parameters
    ascending_selection_sort(arrayA, sizeA);
    printarray(arrayA, sizeA);
    cout << "Enter the number you want to search: ";
        cin >> key;
    
        if (binary_search(arrayA, sizeA, key) == true)
            cout << "The key is found" << endl;
        else
            cout << "The key does not exist" << endl;

    descending_selection_sort(arrayA, sizeA);
    printarray(arrayA, sizeA);
    
     
    return 0;
}

void printarray(int arrayx[], int sizeX)  //syntax of passing arrays to a function
{
    for (int i = 0; i <= sizeX - 1; i++)
        cout << arrayx[i] << ", ";
    cout << endl;
}

void ascending_selection_sort(int arrayx[], int size)
{
    int temp;
    for (int i = 0; i < size - 1; i++)
    {
        for (int j = i + 1; j < size; j++)
        {
            if (arrayx[j] < arrayx[i])
            {
                temp = arrayx[j];
                arrayx[j] = arrayx[i];
                arrayx[i] = temp;
            }
        }
    }
}


void descending_selection_sort(int arrayx[], int size)
{
    int temp;
    for (int i = 0; i < (size - 1); i++)
    {
        for (int j = i + 1; j < size; j++)
        {
            if (arrayx[j] > arrayx[i])
            {
                temp = arrayx[j];
                arrayx[j] = arrayx[i];
                arrayx[i] = temp;
            }
        }
    }
}

